// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CollectionDeployed extends ethereum.Event {
  get params(): CollectionDeployed__Params {
    return new CollectionDeployed__Params(this);
  }
}

export class CollectionDeployed__Params {
  _event: CollectionDeployed;

  constructor(event: CollectionDeployed) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class CollectionExchangeSettled extends ethereum.Event {
  get params(): CollectionExchangeSettled__Params {
    return new CollectionExchangeSettled__Params(this);
  }
}

export class CollectionExchangeSettled__Params {
  _event: CollectionExchangeSettled;

  constructor(event: CollectionExchangeSettled) {
    this._event = event;
  }

  get oldExchange(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newExchange(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollectionRegistrySettled extends ethereum.Event {
  get params(): CollectionRegistrySettled__Params {
    return new CollectionRegistrySettled__Params(this);
  }
}

export class CollectionRegistrySettled__Params {
  _event: CollectionRegistrySettled;

  constructor(event: CollectionRegistrySettled) {
    this._event = event;
  }

  get oldRegistry(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRegistry(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  collections(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "collections",
      "collections(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_collections(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collections",
      "collections(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collectionsMutilpleSupply(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "collectionsMutilpleSupply",
      "collectionsMutilpleSupply(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_collectionsMutilpleSupply(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collectionsMutilpleSupply",
      "collectionsMutilpleSupply(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newCollection(_name: string, _symbol: string, _tokenURI: string): Address {
    let result = super.call(
      "newCollection",
      "newCollection(string,string,string):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_tokenURI),
      ],
    );

    return result[0].toAddress();
  }

  try_newCollection(
    _name: string,
    _symbol: string,
    _tokenURI: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newCollection",
      "newCollection(string,string,string):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_tokenURI),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newCollectionMultipleSupply(
    _name: string,
    _symbol: string,
    _tokenURI: string,
  ): Address {
    let result = super.call(
      "newCollectionMultipleSupply",
      "newCollectionMultipleSupply(string,string,string):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_tokenURI),
      ],
    );

    return result[0].toAddress();
  }

  try_newCollectionMultipleSupply(
    _name: string,
    _symbol: string,
    _tokenURI: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newCollectionMultipleSupply",
      "newCollectionMultipleSupply(string,string,string):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_tokenURI),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalCollections(): BigInt {
    let result = super.call(
      "totalCollections",
      "totalCollections():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalCollections(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollections",
      "totalCollections():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _implMultiple(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _impl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _registry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _exchange(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class NewCollectionCall extends ethereum.Call {
  get inputs(): NewCollectionCall__Inputs {
    return new NewCollectionCall__Inputs(this);
  }

  get outputs(): NewCollectionCall__Outputs {
    return new NewCollectionCall__Outputs(this);
  }
}

export class NewCollectionCall__Inputs {
  _call: NewCollectionCall;

  constructor(call: NewCollectionCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _tokenURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class NewCollectionCall__Outputs {
  _call: NewCollectionCall;

  constructor(call: NewCollectionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewCollectionMultipleSupplyCall extends ethereum.Call {
  get inputs(): NewCollectionMultipleSupplyCall__Inputs {
    return new NewCollectionMultipleSupplyCall__Inputs(this);
  }

  get outputs(): NewCollectionMultipleSupplyCall__Outputs {
    return new NewCollectionMultipleSupplyCall__Outputs(this);
  }
}

export class NewCollectionMultipleSupplyCall__Inputs {
  _call: NewCollectionMultipleSupplyCall;

  constructor(call: NewCollectionMultipleSupplyCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _tokenURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class NewCollectionMultipleSupplyCall__Outputs {
  _call: NewCollectionMultipleSupplyCall;

  constructor(call: NewCollectionMultipleSupplyCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetNewExchangeCall extends ethereum.Call {
  get inputs(): SetNewExchangeCall__Inputs {
    return new SetNewExchangeCall__Inputs(this);
  }

  get outputs(): SetNewExchangeCall__Outputs {
    return new SetNewExchangeCall__Outputs(this);
  }
}

export class SetNewExchangeCall__Inputs {
  _call: SetNewExchangeCall;

  constructor(call: SetNewExchangeCall) {
    this._call = call;
  }

  get _exchange(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewExchangeCall__Outputs {
  _call: SetNewExchangeCall;

  constructor(call: SetNewExchangeCall) {
    this._call = call;
  }
}

export class SetProxyRegistryCall extends ethereum.Call {
  get inputs(): SetProxyRegistryCall__Inputs {
    return new SetProxyRegistryCall__Inputs(this);
  }

  get outputs(): SetProxyRegistryCall__Outputs {
    return new SetProxyRegistryCall__Outputs(this);
  }
}

export class SetProxyRegistryCall__Inputs {
  _call: SetProxyRegistryCall;

  constructor(call: SetProxyRegistryCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProxyRegistryCall__Outputs {
  _call: SetProxyRegistryCall;

  constructor(call: SetProxyRegistryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
