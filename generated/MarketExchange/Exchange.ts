// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OrderApprovedPartOne extends ethereum.Event {
  get params(): OrderApprovedPartOne__Params {
    return new OrderApprovedPartOne__Params(this);
  }
}

export class OrderApprovedPartOne__Params {
  _event: OrderApprovedPartOne;

  constructor(event: OrderApprovedPartOne) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get exchange(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get makerRelayerFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get takerRelayerFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get feeMethod(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get side(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get saleKind(): i32 {
    return this._event.parameters[9].value.toI32();
  }

  get target(): Address {
    return this._event.parameters[10].value.toAddress();
  }
}

export class OrderApprovedPartTwo extends ethereum.Event {
  get params(): OrderApprovedPartTwo__Params {
    return new OrderApprovedPartTwo__Params(this);
  }
}

export class OrderApprovedPartTwo__Params {
  _event: OrderApprovedPartTwo;

  constructor(event: OrderApprovedPartTwo) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get howToCall(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get callData(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get staticTarget(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get staticExtradata(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get paymentToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get basePrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get extra(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get listingTime(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get expirationTime(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get salt(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get orderbookInclusionDesired(): boolean {
    return this._event.parameters[11].value.toBoolean();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class OrdersMatched extends ethereum.Event {
  get params(): OrdersMatched__Params {
    return new OrdersMatched__Params(this);
  }
}

export class OrdersMatched__Params {
  _event: OrdersMatched;

  constructor(event: OrdersMatched) {
    this._event = event;
  }

  get buyHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sellHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get collection(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get metadata(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Exchange__sellOrderAmountRemainingResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTracking(): boolean {
    return this.value0;
  }

  getLeft(): BigInt {
    return this.value1;
  }
}

export class Exchange extends ethereum.SmartContract {
  static bind(address: Address): Exchange {
    return new Exchange("Exchange", address);
  }

  INVERSE_BASIS_POINT(): BigInt {
    let result = super.call(
      "INVERSE_BASIS_POINT",
      "INVERSE_BASIS_POINT():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_INVERSE_BASIS_POINT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INVERSE_BASIS_POINT",
      "INVERSE_BASIS_POINT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedOrders(param0: Bytes): boolean {
    let result = super.call(
      "approvedOrders",
      "approvedOrders(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBoolean();
  }

  try_approvedOrders(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedOrders",
      "approvedOrders(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calculateCurrentPrice_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    amount: BigInt,
  ): BigInt {
    let result = super.call(
      "calculateCurrentPrice_",
      "calculateCurrentPrice_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateCurrentPrice_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    amount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCurrentPrice_",
      "calculateCurrentPrice_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateFinalPrice(
    side: i32,
    saleKind: i32,
    basePrice: BigInt,
    extra: BigInt,
    listingTime: BigInt,
    expirationTime: BigInt,
    amount: BigInt,
  ): BigInt {
    let result = super.call(
      "calculateFinalPrice",
      "calculateFinalPrice(uint8,uint8,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(basePrice),
        ethereum.Value.fromUnsignedBigInt(extra),
        ethereum.Value.fromUnsignedBigInt(listingTime),
        ethereum.Value.fromUnsignedBigInt(expirationTime),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateFinalPrice(
    side: i32,
    saleKind: i32,
    basePrice: BigInt,
    extra: BigInt,
    listingTime: BigInt,
    expirationTime: BigInt,
    amount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateFinalPrice",
      "calculateFinalPrice(uint8,uint8,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(basePrice),
        ethereum.Value.fromUnsignedBigInt(extra),
        ethereum.Value.fromUnsignedBigInt(listingTime),
        ethereum.Value.fromUnsignedBigInt(expirationTime),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateMatchPrice_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethodsSidesKindsHowToCalls: Array<i32>,
    calldataBuy: Bytes,
    calldataSell: Bytes,
    replacementPatternBuy: Bytes,
    replacementPatternSell: Bytes,
    staticExtradataBuy: Bytes,
    staticExtradataSell: Bytes,
    amount: BigInt,
  ): BigInt {
    let result = super.call(
      "calculateMatchPrice_",
      "calculateMatchPrice_(address[14],uint256[14],uint8[8],bytes,bytes,bytes,bytes,bytes,bytes,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromI32Array(feeMethodsSidesKindsHowToCalls),
        ethereum.Value.fromBytes(calldataBuy),
        ethereum.Value.fromBytes(calldataSell),
        ethereum.Value.fromBytes(replacementPatternBuy),
        ethereum.Value.fromBytes(replacementPatternSell),
        ethereum.Value.fromBytes(staticExtradataBuy),
        ethereum.Value.fromBytes(staticExtradataSell),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateMatchPrice_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethodsSidesKindsHowToCalls: Array<i32>,
    calldataBuy: Bytes,
    calldataSell: Bytes,
    replacementPatternBuy: Bytes,
    replacementPatternSell: Bytes,
    staticExtradataBuy: Bytes,
    staticExtradataSell: Bytes,
    amount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateMatchPrice_",
      "calculateMatchPrice_(address[14],uint256[14],uint8[8],bytes,bytes,bytes,bytes,bytes,bytes,uint256):(uint256)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromI32Array(feeMethodsSidesKindsHowToCalls),
        ethereum.Value.fromBytes(calldataBuy),
        ethereum.Value.fromBytes(calldataSell),
        ethereum.Value.fromBytes(replacementPatternBuy),
        ethereum.Value.fromBytes(replacementPatternSell),
        ethereum.Value.fromBytes(staticExtradataBuy),
        ethereum.Value.fromBytes(staticExtradataSell),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelledOrFinalized(param0: Bytes): boolean {
    let result = super.call(
      "cancelledOrFinalized",
      "cancelledOrFinalized(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBoolean();
  }

  try_cancelledOrFinalized(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelledOrFinalized",
      "cancelledOrFinalized(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  exchangeToken(): Address {
    let result = super.call("exchangeToken", "exchangeToken():(address)", []);

    return result[0].toAddress();
  }

  try_exchangeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "exchangeToken",
      "exchangeToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashOrder_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
  ): Bytes {
    let result = super.call(
      "hashOrder_",
      "hashOrder_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes):(bytes32)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
      ],
    );

    return result[0].toBytes();
  }

  try_hashOrder_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashOrder_",
      "hashOrder_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes):(bytes32)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashToSign_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
  ): Bytes {
    let result = super.call(
      "hashToSign_",
      "hashToSign_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes):(bytes32)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
      ],
    );

    return result[0].toBytes();
  }

  try_hashToSign_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashToSign_",
      "hashToSign_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes):(bytes32)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ordersCanMatch_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethodsSidesKindsHowToCalls: Array<i32>,
    calldataBuy: Bytes,
    calldataSell: Bytes,
    replacementPatternBuy: Bytes,
    replacementPatternSell: Bytes,
    staticExtradataBuy: Bytes,
    staticExtradataSell: Bytes,
  ): boolean {
    let result = super.call(
      "ordersCanMatch_",
      "ordersCanMatch_(address[14],uint256[14],uint8[8],bytes,bytes,bytes,bytes,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromI32Array(feeMethodsSidesKindsHowToCalls),
        ethereum.Value.fromBytes(calldataBuy),
        ethereum.Value.fromBytes(calldataSell),
        ethereum.Value.fromBytes(replacementPatternBuy),
        ethereum.Value.fromBytes(replacementPatternSell),
        ethereum.Value.fromBytes(staticExtradataBuy),
        ethereum.Value.fromBytes(staticExtradataSell),
      ],
    );

    return result[0].toBoolean();
  }

  try_ordersCanMatch_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethodsSidesKindsHowToCalls: Array<i32>,
    calldataBuy: Bytes,
    calldataSell: Bytes,
    replacementPatternBuy: Bytes,
    replacementPatternSell: Bytes,
    staticExtradataBuy: Bytes,
    staticExtradataSell: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "ordersCanMatch_",
      "ordersCanMatch_(address[14],uint256[14],uint8[8],bytes,bytes,bytes,bytes,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromI32Array(feeMethodsSidesKindsHowToCalls),
        ethereum.Value.fromBytes(calldataBuy),
        ethereum.Value.fromBytes(calldataSell),
        ethereum.Value.fromBytes(replacementPatternBuy),
        ethereum.Value.fromBytes(replacementPatternSell),
        ethereum.Value.fromBytes(staticExtradataBuy),
        ethereum.Value.fromBytes(staticExtradataSell),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyFeeRegistry(): Address {
    let result = super.call(
      "royaltyFeeRegistry",
      "royaltyFeeRegistry():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_royaltyFeeRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "royaltyFeeRegistry",
      "royaltyFeeRegistry():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sellOrderAmountRemaining(
    param0: Bytes,
  ): Exchange__sellOrderAmountRemainingResult {
    let result = super.call(
      "sellOrderAmountRemaining",
      "sellOrderAmountRemaining(bytes32):(bool,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Exchange__sellOrderAmountRemainingResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
    );
  }

  try_sellOrderAmountRemaining(
    param0: Bytes,
  ): ethereum.CallResult<Exchange__sellOrderAmountRemainingResult> {
    let result = super.tryCall(
      "sellOrderAmountRemaining",
      "sellOrderAmountRemaining(bytes32):(bool,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Exchange__sellOrderAmountRemainingResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
      ),
    );
  }

  tokenTransferProxy(): Address {
    let result = super.call(
      "tokenTransferProxy",
      "tokenTransferProxy():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_tokenTransferProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenTransferProxy",
      "tokenTransferProxy():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validateOrderParameters_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
  ): boolean {
    let result = super.call(
      "validateOrderParameters_",
      "validateOrderParameters_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
      ],
    );

    return result[0].toBoolean();
  }

  try_validateOrderParameters_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateOrderParameters_",
      "validateOrderParameters_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validateOrder_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    v: i32,
    r: Bytes,
    s: Bytes,
  ): boolean {
    let result = super.call(
      "validateOrder_",
      "validateOrder_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
      ],
    );

    return result[0].toBoolean();
  }

  try_validateOrder_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    feeMethod: i32,
    side: i32,
    saleKind: i32,
    howToCall: i32,
    callData: Bytes,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    v: i32,
    r: Bytes,
    s: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateOrder_",
      "validateOrder_(address[7],uint256[7],uint8,uint8,uint8,uint8,bytes,bytes,bytes,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(feeMethod)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(howToCall)),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get registryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenTransferProxyAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get royaltyFeeRegistryAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveOrder_Call extends ethereum.Call {
  get inputs(): ApproveOrder_Call__Inputs {
    return new ApproveOrder_Call__Inputs(this);
  }

  get outputs(): ApproveOrder_Call__Outputs {
    return new ApproveOrder_Call__Outputs(this);
  }
}

export class ApproveOrder_Call__Inputs {
  _call: ApproveOrder_Call;

  constructor(call: ApproveOrder_Call) {
    this._call = call;
  }

  get addrs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get uints(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get feeMethod(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get side(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get saleKind(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get howToCall(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get callData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get replacementPattern(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get staticExtradata(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get orderbookInclusionDesired(): boolean {
    return this._call.inputValues[9].value.toBoolean();
  }
}

export class ApproveOrder_Call__Outputs {
  _call: ApproveOrder_Call;

  constructor(call: ApproveOrder_Call) {
    this._call = call;
  }
}

export class AtomicMatch_Call extends ethereum.Call {
  get inputs(): AtomicMatch_Call__Inputs {
    return new AtomicMatch_Call__Inputs(this);
  }

  get outputs(): AtomicMatch_Call__Outputs {
    return new AtomicMatch_Call__Outputs(this);
  }
}

export class AtomicMatch_Call__Inputs {
  _call: AtomicMatch_Call;

  constructor(call: AtomicMatch_Call) {
    this._call = call;
  }

  get addrs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get uints(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get feeMethodsSidesKindsHowToCalls(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get calldataBuy(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get calldataSell(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get replacementPatternBuy(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get replacementPatternSell(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get staticExtradataBuy(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get staticExtradataSell(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get vs(): Array<i32> {
    return this._call.inputValues[9].value.toI32Array();
  }

  get rssMetadata(): Array<Bytes> {
    return this._call.inputValues[10].value.toBytesArray();
  }
}

export class AtomicMatch_Call__Outputs {
  _call: AtomicMatch_Call;

  constructor(call: AtomicMatch_Call) {
    this._call = call;
  }
}

export class CancelOrder_Call extends ethereum.Call {
  get inputs(): CancelOrder_Call__Inputs {
    return new CancelOrder_Call__Inputs(this);
  }

  get outputs(): CancelOrder_Call__Outputs {
    return new CancelOrder_Call__Outputs(this);
  }
}

export class CancelOrder_Call__Inputs {
  _call: CancelOrder_Call;

  constructor(call: CancelOrder_Call) {
    this._call = call;
  }

  get addrs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get uints(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get feeMethod(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get side(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get saleKind(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get howToCall(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get callData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get replacementPattern(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get staticExtradata(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[9].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[10].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[11].value.toBytes();
  }
}

export class CancelOrder_Call__Outputs {
  _call: CancelOrder_Call;

  constructor(call: CancelOrder_Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
