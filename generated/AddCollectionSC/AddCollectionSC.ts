// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddCollection extends ethereum.Event {
  get params(): AddCollection__Params {
    return new AddCollection__Params(this);
  }
}

export class AddCollection__Params {
  _event: AddCollection;

  constructor(event: AddCollection) {
    this._event = event;
  }

  get add_(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddCollectionSC extends ethereum.SmartContract {
  static bind(address: Address): AddCollectionSC {
    return new AddCollectionSC("AddCollectionSC", address);
  }

  addCollection(add_: Address): boolean {
    let result = super.call("addCollection", "addCollection(address):(bool)", [
      ethereum.Value.fromAddress(add_),
    ]);

    return result[0].toBoolean();
  }

  try_addCollection(add_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addCollection",
      "addCollection(address):(bool)",
      [ethereum.Value.fromAddress(add_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addressAdded(param0: Address): boolean {
    let result = super.call("addressAdded", "addressAdded(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_addressAdded(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("addressAdded", "addressAdded(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAddedCollection(add_: Address): boolean {
    let result = super.call(
      "isAddedCollection",
      "isAddedCollection(address):(bool)",
      [ethereum.Value.fromAddress(add_)],
    );

    return result[0].toBoolean();
  }

  try_isAddedCollection(add_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAddedCollection",
      "isAddedCollection(address):(bool)",
      [ethereum.Value.fromAddress(add_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddCollectionCall extends ethereum.Call {
  get inputs(): AddCollectionCall__Inputs {
    return new AddCollectionCall__Inputs(this);
  }

  get outputs(): AddCollectionCall__Outputs {
    return new AddCollectionCall__Outputs(this);
  }
}

export class AddCollectionCall__Inputs {
  _call: AddCollectionCall;

  constructor(call: AddCollectionCall) {
    this._call = call;
  }

  get add_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddCollectionCall__Outputs {
  _call: AddCollectionCall;

  constructor(call: AddCollectionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
